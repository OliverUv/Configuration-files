#!/usr/bin/env python2
# encoding: utf-8

''' MIT LICENSE ~ ヽ(  ﾟ ヮﾟ )ノ ! REJOICE
Rosary Color Manager (rcm) - manages your colors
Copyright © 2015 Oliver Uvman

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'''

from __future__ import print_function
from colorsys import rgb_to_hls, hls_to_rgb

import argparse
import os.path
import struct
import sys

__version__ = '0.1'

parser = argparse.ArgumentParser(
    description='''Rosary Color Manager (rcm)

        is a utility for managing and letting programs access
        your themes, and the variations on themes we call shades.
    ''',
    usage='''
        Run with no arguments or --help or -h for help.
    ''')

color_file = '/tmp/termcolor'


def add_flag(name, help):
    parser.add_argument(
        '--%s' % name,
        default=False,
        action='store_true',
        help=help)


add_flag('tmux', "Wrap printed escape codes in tmux passthrough escape code")
add_flag('shade', "Update the theme's shade before acting")
add_flag('toggle', "Toggles color scheme before acting")
add_flag('urxvt-arg', "Prints text suitable for specifying urxvt's background via its startup arguments")
add_flag('urxvt-escape', "Prints escape characters and text that will cause an urxvt terminal to switch all colors")
add_flag('bg-escape', "Prints escape characters and text that will cause an urxvt terminal to switch background color")
add_flag('xresource', "Prints Xterm-like setting lines, suitable for Xresource files")


class Theme(object):
    """Represents a consistent look with variations."""
    def __init__(self, name, shade_list, fg_main, fg_colors):
        self.name = name
        self.shade_list = shade_list
        self.fg_main = fg_main
        self.fg_colors = fg_colors


def construct_themes():
    return [
        Theme(
            'subduedlatte',
            [
                '090909',
                '0b1217',
                '13130F',
                '071009',
                '100b13',
                '100707',
                '0a0a14',
                '15110b',
                '10070a',
            ],
            '7e7e7e',
            [
                '303030',
                'c03000',
                '8AB22C',
                'B5C865',
                '426870',
                '6D506D',
                '4bb5c1',
                'b2b2b5',
                '5F5F5F',
                'FF3A78',
                'A6CD07',
                'fecf35',
                '4A7781',
                'FF3B77',
                '4bb5c1',
                'c2c2c5',
            ],
        ),
        Theme(
            'Faith',
            [
                'ededd0',
                'dbe3ee',
                'e1f5e8',
                'f2e2d2',
                'e8e0ed',
                'dfdfef',
                'f1dee1',
                'edf3de',
                'efefeb',
            ],
            '49483e',
            [
                '272822',
                'ee3a7b',
                '2b7b6a',
                'a46d1f',
                '2874b6',
                '513998',
                'bc4c1a',
                'f1f0ed',
                '75715e',
                'ee0055',
                '03ac88',
                'f49107',
                '007af4',
                '5a1ce9',
                'f44c00',
                'f8f8f2',
            ],
        )
    ]


def main():
    args = parser.parse_args()
    themes = construct_themes()

    # Find current theme
    theme_idx = 0
    shade_idx = 0

    if os.path.isfile(color_file):
        with open(color_file, 'r+') as f:
            theme_idx = int(f.read(1))
            shade_idx = int(f.read(1))
        if args.toggle:
            theme_idx = (theme_idx + 1) % len(themes)
        if args.toggle or args.shade:
            shade_idx = (shade_idx + 1) % len(themes[theme_idx].shade_list)

    if args.toggle or args.shade:
        with open(color_file, 'w+') as f:
            f.write(str(theme_idx))
            f.write(str(shade_idx))

    theme = themes[theme_idx]
    shades = theme.shade_list
    shade = shades[shade_idx]
    fgs = theme.fg_colors

    printwrap = wrap_print
    if args.tmux:
        printwrap = wrap_tmux_print

    if not any(args.__dict__.values()):
        # TODO figure out if accessing __dict__ is reasonable
        parser.print_help()

    elif args.urxvt_arg:
        def p(string):
            print(string, end=' ')
        p("-bg #%s" % (shade,))
        p("-fg #%s" % (theme.fg_main,))
        # TODO add cursor color
        for (i, color) in enumerate(fgs):
            p('--color%d #%s' % (i, color))

    elif args.xresource:
        print('background: #%s' % (shade,))
        print('foreground: #%s' % (theme.fg_main,))
        # TODO add cursor color
        for (i, color) in enumerate(fgs):
            print('color%d: #%s' % (i, color))

    elif args.bg_escape:
        printwrap('\x1b]11;#%s' % (shade,))

    elif args.urxvt_escape:
        printwrap('\x1b]11;#%s' % (shade,))
        printwrap('\x1b]10;#%s' % (theme.fg_main,))
        # TODO add cursor color
        for (i, color) in enumerate(fgs):
            printwrap('\x1b]4;%s;#%s' % (i, color))

    sys.stdout.flush()
    exit(0)


def wrap_tmux_print(t):
    print('\x1bPtmux;\x1b' + t, end='\a\x1b\\')


def wrap_print(t):
    print(t, end='\a')


def hex_to_int(col):
    # 'RRGGBB' -> (0-255,0-255,0-255)
    return struct.unpack('BBB', col.decode('hex'))


def int_to_hex(col):
    # 'RRGGBB' <- (0-255,0-255,0-255)
    return struct.pack('BBB', *col).encode('hex')


def ratio(c):
    # 0-255 -> 0-1
    return (c[0] / 255.0, c[1] / 255.0, c[2] / 255.0)


def unratio(c):
    # 0-255 <- 0-1
    return (c[0] * 255.0, c[1] * 255.0, c[2] * 255.0)


def invert_brightness(c):
    return (c[0], (1.0 - c[1]), c[2])


def modify_in_space(rgb, to_space, modify, from_space):
    hx = hex_to_int(rgb)
    r = ratio(hx)
    hsv = rgb_to_hls(*r)
    hsi = modify(hsv)
    rgb = hls_to_rgb(*hsi)
    u = unratio(rgb)
    x = int_to_hex(u)
    # for i in [rgb, hx, r, hsv, hsi, rgb, u, x]:
    #     print('%s ->' % (i,))
    return x


def inv_bright(c):
    return modify_in_space(c, rgb_to_hls, invert_brightness, hls_to_rgb)

# map(inv_bright, shades[0]) ~= shades[1]


if __name__ == '__main__':
    main()
