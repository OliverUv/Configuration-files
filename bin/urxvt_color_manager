#!/usr/bin/env python2
# encoding: utf-8

import argparse
import os.path
import struct

from colorsys import rgb_to_hls, hls_to_rgb, rgb_to_hsv, hsv_to_rgb

parser = argparse.ArgumentParser(description='''quickswitch for i3''')
parser.add_argument('--readonly', default=False, action='store_true',
        help='Do not update shade')
parser.add_argument('--urxvtarg', default=False, action='store_true',
        help="Returns text suitable for specifying urxvt's background")
parser.add_argument('--toggle', default=False, action='store_true',
        help='Toggles color scheme')
args = parser.parse_args()

# themes[theme_idx][shade_idx]
themes = [
    [  # Dark latte
        '090909',
        '0b1217',
        '13130F',
        '071009',
        '100b13',
        '100707',
        '0a0a14',
        '15110b',
        '10070a',
    ],
    [  # Light creme
        'ededed',
        'dbe3ee',
        'e1f5e8',
        'e8e0ed',
        'dfdfef',
        'f2e2e2',
        'f1dee1',
        'ede7de',
        'efefeb',
    ],
]

# fg_colors[theme_idx] contains term colors 0-15
fg_colors = [
    [  # Subdued
        '303030',
        'c03000',
        '8AB22C',
        'B5C865',
        '426870',
        '6D506D',
        '4bb5c1',
        'b2b2b5',
        '5F5F5F',
        'FF3A78',
        'A6CD07',
        'fecf35',
        '4A7781',
        'FF3B77',
        '4bb5c1',
        'c2c2c5',
    ],
    [  # Light creme
        '272822',
        'ee3a7b',
        '2b7b6a',
        'a46d1f',
        '2874b6',
        '513998',
        'bc4c1a',
        'f1f0ed',
        '75715e',
        'ee0055',
        '03ac88',
        'f49107',
        '007af4',
        '5a1ce9',
        'f44c00',
        'f8f8f2',
    ],
]

theme_idx = 0
shade_idx = 0

color_file = '/tmp/termcolor'

if os.path.isfile(color_file):
    with open(color_file, 'r+') as f:
        theme_idx = int(f.read(1))
        shade_idx = int(f.read(1))
    if not args.readonly:
        if args.toggle:
            theme_idx = (theme_idx + 1) % min(len(fg_colors), len(themes))
        shade_idx = (shade_idx + 1) % len(themes[theme_idx])

shades = themes[theme_idx]
shade = shades[shade_idx]
fgs = fg_colors[theme_idx]

if not args.readonly:
    with open(color_file, 'w+') as f:
        f.write(str(theme_idx))
        f.write(str(shade_idx))
        f.write('\n')

if args.urxvtarg:
    args = "-bg #%s " % (shade,)
    for (i, color) in enumerate(fgs):
        args += ('--color%d #%s ' % (i, color))
    print(args)
else:
    print("background: #%s\n" % (shade,))
    for (i, color) in enumerate(fgs):
        print('color%d: #%s\n' % (i, color))


exit(0)


def hex_to_int(col):
    # 'RRGGBB' -> (0-255,0-255,0-255)
    return struct.unpack('BBB', col.decode('hex'))


def int_to_hex(col):
    # 'RRGGBB' <- (0-255,0-255,0-255)
    return struct.pack('BBB', *col).encode('hex')


def ratio(c):
    # 0-255 -> 0-1
    return (c[0] / 255.0, c[1] / 255.0, c[2] / 255.0)


def unratio(c):
    # 0-255 <- 0-1
    return (c[0] * 255.0, c[1] * 255.0, c[2] * 255.0)


def invert_brightness(c):
    return (c[0], (1.0 - c[1]), c[2])


def modify_in_space(rgb, to_space, modify, from_space):
    hx = hex_to_int(rgb)
    r = ratio(hx)
    hsv = rgb_to_hls(*r)
    hsi = modify(hsv)
    rgb = hls_to_rgb(*hsi)
    u = unratio(rgb)
    x = int_to_hex(u)
    # for i in [rgb, hx, r, hsv, hsi, rgb, u, x]:
    #     print('%s ->\n' % (i,))
    return x


def inv_bright(c):
    return modify_in_space(c, rgb_to_hls, invert_brightness, hls_to_rgb)

# map(inv_bright, shades[0]) ~= shades[1]
