#!/bin/bash

# imgur script by Phil Tang <tangphillip@gmail.com>
# Based the work of Bart Nagel <bart@tremby.net>
# Shared with a Creative Commons Attribution 3.0 Unported License.

# If you have rate limit issues, get your own key at http://api.imgur.com/
CLIENT_ID="9657b96ca0b7f38"
CLIPBOARD=true

# function to output usage instructions
function usage {
	echo "Usage: $(basename $0) <filename>
Upload an image to imgur, print its URL to stdout, and print the delete page URL to stderr.
If you're on a Mac or have xsel/xclip, copy the image URL to the clipboard." >&2
}

# check API key has been entered
if [ "$CLIENT_ID" = "Your Client ID" ]; then
	echo "You first need to edit the script and put your API key in the variable near the top." >&2
	exit 15
fi

# check arguments
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
	usage
	exit 0
elif [[ "$1" == "-x" || "$1" == "--no-clipboard" ]]; then
	CLIPBOARD=false
	shift
fi

if [ $# -ne 1 ]; then
	if [ $# == 0 ]; then
		echo "No file specified." >&2
	else
		echo "Unexpected arguments" >&2
	fi
	usage
	exit 16
elif [ ! -f "$1" ]; then
	echo "File \"$1\" not found" >&2
	exit 1
fi

# check curl is available
which curl &>/dev/null || {
	echo "Couln't find curl, which is required." >&2
	exit 17
}

# upload the image
# the "Expect: " header is to get around a problem when using this through the
# Squid proxy. Not sure if it's a Squid bug or what.
response=$(curl \
	-H "Authorization: Client-ID $CLIENT_ID" \
	-H "Expect: " \
	-F "image=@$1" \
	https://api.imgur.com/3/image 2>/dev/null)
if [ $? -ne 0 ]; then
	echo "Upload failed" >&2
	exit 2
elif [ $(echo $response | grep -c "<error_msg>") -gt 0 ]; then
	echo "Error message from imgur:" >&2
	echo $response | sed -E 's/.*<error_msg>(.*)<\/error_msg>.*/\1/' >&2
	exit 3
elif [[ "$response" != *deletehash* ]]; then
	echo "Unknown Failure: Imgur is probably down for maintenance."
	exit 4
fi

# parse the response and output our stuff
url=$(echo $response | sed -E 's/.*"link":"([^"]+)".*/\1/' | sed "s|\\\\/|/|g")
deleteurl=$(echo $response | sed -E 's/.*"deletehash":"([^"]+)".*/\1/' | sed "s|^|http://imgur.com/delete/|")
echo $url
echo "Delete page: $deleteurl" >&2

# put the URL on the clipboard if we have xsel or xclip
if [ $CLIPBOARD == true ]; then
	{ which pbcopy &>/dev/null && echo -n $url | pbcopy; } \
		|| { which xsel &>/dev/null && echo -n $url | xsel --input --clipboard; } \
		|| { which xclip &>/dev/null && echo -n $url | xclip -selection clipboard; } \
		|| echo "Haven't copied to the clipboard: no pbcopy, xsel, or xclip" >&2
fi
