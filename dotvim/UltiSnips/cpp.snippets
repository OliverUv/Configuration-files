# vim:ft=snippets:
priority -48

global !p
def class_name(snip):
    n = snip.basename or name
    n = re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), n)
    n = n[0].upper() + n[1:]
    return n
endglobal

snippet def "#define ..."
#define ${1}
endsnippet

snippet ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0}
}
endsnippet

snippet fore "for each loop (fore)"
for (${1:auto} ${2:i} : ${3}) {
	${VISUAL}${0}
}
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard"
#pragma once

${0}
endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet wh "while loop"
while (${1}) {
	${VISUAL}${0}
}
endsnippet

snippet do "do...while loop (do)"
do {
	${VISUAL}${0}
} while (${1});
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1}) {
	${VISUAL}${2}
}${0}
endsnippet

snippet el "else .. (else)"
else {
	${VISUAL}${1}
}${0}
endsnippet

snippet eli "else if .. (eli)"
else if (${1}) {
	${VISUAL}${2}
}${0}
endsnippet

snippet ife "if .. else (ife)"
if (${1}) {
	${2}
} else {
	${3:/* else */}
}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = class_name(snip) + "_t"`} {
	${0}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet mfun
${4:void} ${1:`!p snip.rv = class_name(snip)`}::${2:memberFunction}(${3})
{
	${0}
}
endsnippet

snippet ctor "constructor" b
${1:`!p snip.rv = class_name(snip)`}::${1/(.*)/$1/}(${2})
	: ${3}
{
	${4}
}${0}
endsnippet

snippet dtor "destructor" b
${1:`!p snip.rv = class_name(snip)`}::~${1/(.*)/$1/}(${2})
{
}${0}
endsnippet

snippet cn "class name" i
${1:`!p snip.rv = class_name(snip)`}::${0}
endsnippet

snippet beginend "$1.begin(), $1.end() (beginend)" i
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet header "class header"
voysys${1}
once${2}
ns${0}
endsnippet

snippet body "class body"
voysys${1}
inc${2}

ns${0}
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = class_name(snip)`} : ${2} {
public:
	explicit ${1/(\w+).*/$1/}(${3});
	virtual ~${1/(\w+).*/$1/}();

private:
	${1/(\w+).*/$1/}() = delete;
	${1/(\w+).*/$1/}(const ${1/(\w+).*/$1/} &) = delete;
	${1/(\w+).*/$1/}(${1/(\w+).*/$1/} &&) = delete;
	${1/(\w+).*/$1/} & operator = (const ${1/(\w+).*/$1/} &) = delete;
	${1/(\w+).*/$1/} & operator = (${1/(\w+).*/$1/} &&) = delete;${0}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`} {

${VISUAL}${0}

}${1/.+/ \/\/ namespace /m}$1
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet tv "std::vector (v)" w
std::vector<${VISUAL}${1}> ${0}
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet sw  "switch statement"
switch (${1}) {
case ${2}:
	${3}
	break;
${4}
default:
	${5}
	break;
}
${0}
endsnippet

snippet ca "case statement"
case ${1}:
	${2}
	break;
${0}
endsnippet

snippet ur "unique pointer" w
std::unique_ptr<${VISUAL}${1}>${0}
endsnippet

snippet mur "make_unique" w
std::make_unique<${1}>(${VISUAL}${2})${0}
endsnippet

snippet sr "shared pointer" w
std::shared_ptr<${VISUAL}${1}>${0}
endsnippet

snippet sc "static cast" w
static_cast<${1}>(${VISUAL}${2})${0}
endsnippet

snippet rc "reinterpret cast" w
reinterpret_cast<${1}>(${VISUAL}${2})${0}
endsnippet

snippet cc "const cast" w
const_cast<${1}>(${VISUAL}${2})${0}
endsnippet

snippet dc "dynamic cast" w
dynamic_cast<${1}>(${VISUAL}${2})${0}
endsnippet

snippet ole "oden log error"
oden_log_error("${1}"${2});${0}
endsnippet

snippet oli "oden log info"
oden_log_info("${1}"${2});${0}
endsnippet

snippet olt "oden log trace"
oden_log_trace("${1}", "${2}", ${3});${0}
endsnippet

snippet olw "oden log warning"
oden_log_warning("${1}"${2});${0}
endsnippet

snippet ofv "openFrameworks log verbose"
ofLog(OF_LOG_VERBOSE, "${1}"${2});${0}
endsnippet

snippet ofw "openFrameworks log warning"
ofLog(OF_LOG_WARNING, "${1}"${2});${0}
endsnippet

snippet ofe "openFrameworks log error"
ofLog(OF_LOG_ERROR, "${1}"${2});${0}
endsnippet

snippet vlp "visulove pop/push"
VU::ofPush();
${VISUAL}${1}
VU::ofPop();${0}
endsnippet

snippet tc "try+catch block"
try {
	${VISUAL}${1}
} catch (${2}) {
	${3}
}${0}
endsnippet

snippet ct "catch block"
catch (${1}) {
	${2}
}${0}
endsnippet

snippet ts "type std::size_t" w
std::size_t${0}
endsnippet

snippet cstr "string" w
const std::string &${0}
endsnippet

snippet str "string" w
std::string${0}
endsnippet

snippet t3 "type int32_t" w
int32_t${0}
endsnippet

snippet tu3 "type uint32_t" w
uint32_t${0}
endsnippet

snippet t6 "type int64_t" w
int64_t${0}
endsnippet

snippet tu6 "type uint64_t" w
uint64_t${0}
endsnippet

snippet pp "pauseplayresetc"
void play();
void pause();
void stop();
void reset();
endsnippet

snippet ppimp "pauseplayresetcimpl"
void ${1:`!p snip.rv = snip.basename or "name"`}::play()
{
}

void ${1/(\w+).*/$1/}::pause()
{
}

void ${1/(\w+).*/$1/}::stop()
{
}

void ${1/(\w+).*/$1/}::reset()
{
}

endsnippet


# vim:ft=snippets:
