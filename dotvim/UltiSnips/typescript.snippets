extends javascript, typescript, cstyle
priority 15

snippet tli "tslint ignore next line" i
// tslint:disable-next-line
endsnippet

snippet ifud "if undefined"
if (${1} === undefined) {
	${VISUAL}${2}
}${0}
endsnippet

snippet ifnud "if not undefined"
if (${1} !== undefined) {
	${VISUAL}${2}
}${0}
endsnippet

snippet ud "undefined" i
undefined
endsnippet

snippet ci "console.info" b
console.info(${1:\`${2:value}\`})
endsnippet

snippet cl "console.log" b
console.log(${1:\`${2:value}\`})
endsnippet

snippet cw "console.warn" b
console.warn(${1:\`${2:value}\`})
endsnippet

snippet ce "console.error" b
console.error(${1:\`${2:value}\`})
endsnippet

snippet wh "while"
while (${1:true}) {
	${VISUAL}${2}
}${0}
endsnippet

snippet fori "for integers"
for (let ${1:i} = 0; $1 < ${2}; $1++) {
	${VISUAL}${3}
}${0}
endsnippet

snippet ford "for dictionary"
for (${1:const} ${2:key} in ${3:dict}) {
	${4:if ($3.hasOwnProperty($2) == false) { continue; }
	}${5:${6:const} ${7:val} = $3[$2];}
	${VISUAL}${8:$3[$2]}
}${0}
endsnippet

snippet fora "for array"
for (let ${1:i} = 0; $1 < ${2:array}.length; $1++) {
	${3:${4:const} ${5:e} = $2[$1];
	}${VISUAL}${6:$2[$1]}
}${0}
endsnippet

snippet af "anonymous function" i
${1:(${2:args})} => ${3:{
	${VISUAL}${4}
}}${0}
endsnippet

snippet im "ES6 import"
import ${3:{ ${4} }} ${5:as ${6} }from '${1:./${2}}';${0}
endsnippet

snippet jsdoc "jsdoc"
/**
 * ${1}
 *
 * ${2:@param {${3:type}} ${4:arg} ${5:desc}}
 * ${6:@return {${7:type}} ${8:desc}}${0}
 */
endsnippet

snippet el "else"
else {
	${VISUAL}${1}
}${0}
endsnippet
