#
# plugins.conf -- weechat v0.4.1
#

[var]
fifo.fifo = "on"
guile.check_license = "off"
lua.check_license = "off"
perl.beep.beep_command_dcc = "$bell"
perl.beep.beep_command_highlight = "$bell"
perl.beep.beep_command_pv = "$bell"
perl.beep.beep_command_timeout = "30000"
perl.beep.beep_dcc = "on"
perl.beep.beep_highlight = "on"
perl.beep.beep_highlight_blacklist = "off"
perl.beep.beep_highlight_whitelist = "off"
perl.beep.beep_pv = "on"
perl.beep.beep_pv_blacklist = "off"
perl.beep.beep_pv_whitelist = "off"
perl.beep.beep_trigger_highlight = ""
perl.beep.beep_trigger_pv = ""
perl.beep.bell_always = ""
perl.beep.blacklist_nicks = ""
perl.beep.whitelist_channels = ""
perl.beep.whitelist_nicks = ""
perl.check_license = "off"
perl.highmon.alignment = "channel"
perl.highmon.away_only = "off"
perl.highmon.color_buf = "on"
perl.highmon.hotlist_show = "off"
perl.highmon.logging = "off"
perl.highmon.merge_private = "off"
perl.highmon.nick_prefix = "<"
perl.highmon.nick_suffix = ">"
perl.highmon.output = "buffer"
perl.highmon.short_names = "off"
perl.topicsed.color_message = "green"
perl.topicsed.message = "edit Topic: "
python.check_license = "off"
python.clone_scanner.autofocus = "off"
python.clone_scanner.clone_onjoin_alert_key = "nick"
python.clone_scanner.clone_report_key = "mask"
python.clone_scanner.colors.clone_report.clone.match = "chat"
python.clone_scanner.colors.clone_report.clone.message = "chat"
python.clone_scanner.colors.clone_report.header.channel = "bold"
python.clone_scanner.colors.clone_report.header.message = "chat"
python.clone_scanner.colors.clone_report.header.number_of_hosts = "bold"
python.clone_scanner.colors.clone_report.subheader.host = "bold"
python.clone_scanner.colors.clone_report.subheader.message = "chat"
python.clone_scanner.colors.clone_report.subheader.number_of_clones = "bold"
python.clone_scanner.colors.join_messages.channel = "bold"
python.clone_scanner.colors.join_messages.identhost = "chat"
python.clone_scanner.colors.join_messages.message = "chat"
python.clone_scanner.colors.join_messages.nick = "bold"
python.clone_scanner.colors.mask.identhost = ""
python.clone_scanner.colors.mask.nick = "bold"
python.clone_scanner.colors.onjoin_alert.channel = "173"
python.clone_scanner.colors.onjoin_alert.matches = "bold 173"
python.clone_scanner.colors.onjoin_alert.message = "173"
python.clone_scanner.colors.onjoin_alert.nick = "bold 173"
python.clone_scanner.compare_idents = "off"
python.clone_scanner.display_join_messages = "off"
python.clone_scanner.display_onjoin_alert_clone_buffer = "on"
python.clone_scanner.display_onjoin_alert_current_buffer = "off"
python.clone_scanner.display_onjoin_alert_target_buffer = "on"
python.clone_scanner.display_scan_report_clone_buffer = "on"
python.clone_scanner.display_scan_report_current_buffer = "on"
python.clone_scanner.display_scan_report_target_buffer = "off"
python.colorize_nicks.blacklist_channels = ""
python.colorize_nicks.blacklist_nicks = "so,root"
python.colorize_nicks.colorize_input = "on"
python.colorize_nicks.greedy_matching = "on"
python.colorize_nicks.ignore_tags = ""
python.colorize_nicks.min_nick_length = "2"
python.emojis.dbfile = "/home/oliver/Configuration-files/weechat/emojis-db.dat"
python.grep.clear_buffer = "off"
python.grep.default_tail_head = "10"
python.grep.go_to_buffer = "on"
python.grep.log_filter = ""
python.grep.max_lines = "4000"
python.grep.show_summary = "on"
python.grep.size_limit = "2048"
python.notify.icon = "/usr/share/pixmaps/weechat.xpm"
python.notify.nick_separator = ": "
python.notify.show_hilights = "on"
python.notify.show_priv_msg = "on"
python.notify.smart_notification = "off"
python.notify.urgency = "normal"
python.whois_on_query.command = "/whois $nick $nick"
python.whois_on_query.self_query = "off"
ruby.check_license = "off"
tcl.check_license = "off"

[desc]
perl.beep.beep_command_dcc = "command for beep on dcc, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_highlight = "command for beep on highlight, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_pv = "command for beep on private message, special value "$bell" is allowed, as well as "$bell;command" (default: "$bell")"
perl.beep.beep_command_timeout = "timeout for command run (in milliseconds, 0 = never kill (not recommended)) (default: "30000")"
perl.beep.beep_dcc = "beep on dcc (default: "on")"
perl.beep.beep_highlight = "beep on highlight (default: "on")"
perl.beep.beep_highlight_blacklist = "turn blacklist for highlights on or off (default: "off")"
perl.beep.beep_highlight_whitelist = "turn whitelist for highlights on or off (default: "off")"
perl.beep.beep_pv = "beep on private message (default: "on")"
perl.beep.beep_pv_blacklist = "turn blacklist for private messages on or off (default: "off")"
perl.beep.beep_pv_whitelist = "turn whitelist for private messages on or off (default: "off")"
perl.beep.beep_trigger_highlight = "word that will trigger execution of beep_command_highlight (if empty, anything will trigger) (default: "")"
perl.beep.beep_trigger_pv = "word that will trigger execution of beep_command_pv (it empty, anything will trigger) (default: "")"
perl.beep.bell_always = "use $bell on private messages and/or highlights regardless of trigger and whitelist settings (example: "pv,highlight") (default: "")"
perl.beep.blacklist_nicks = "comma-separated list of "server.nick": if not empty, these nicks will not be able to trigger execution of commands. Cannot be used in conjuction with whitelist (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.beep.whitelist_channels = "comma-separated list of "server.#channel": if not empty, only these channels will trigger execution of commands (example: "freenode.#weechat,freenode.#channel2") (default: "")"
perl.beep.whitelist_nicks = "comma-separated list of "server.nick": if not empty, only these nicks will trigger execution of commands (example: "freenode.nick1,freenode.nick2") (default: "")"
perl.stalker.db_name = "file containing the SQLite database where information is recorded. This database is created on loading of stalker if it does not exist. ("%h" will be replaced by WeeChat home, "~/.weechat" by default) (default: %h/nicks.db)"
perl.stalker.debug = "Prints debug output to core buffer so you know exactly what is going on. This is far too verbose to be enabled when not actively debugging something. (default: off)"
perl.stalker.guest_host_regex = "regex mask to ignore host masks"
perl.stalker.guest_nick_regex = "Some networks set default nicknames when a user fails to identify to nickserv, other networks using relay-bots, some irc clients set default nicknames when someone connects and often these change from network to network depending on who is configuring the java irc clients. This allows a regular expression to be entered. When a nickname matches the regular expression and "ignore_guest_nicks" is enabled the nickname is dropped from the search as if it had never been seen. (default: ^(guest|weebot|Floodbot).*)"
perl.stalker.ignore_guest_hosts = "See option guest_host_regex"
perl.stalker.ignore_guest_nicks = "See option guest_nick_regex"
perl.stalker.ignore_nickchange = "When enabled, /NICK changes won't be monitored. (default: off)"
perl.stalker.ignore_whois = "When enabled, /WHOIS won't be monitored. (default: off)"
perl.stalker.max_recursion = "For each correlation between nick <-> host that happens, one point of recursion happens. A corrupt database, general evilness, or misfortune can cause the recursion to skyrocket. This is a ceiling number that says if after this many correlation attempts we have not found all nickname and hostname correlations, stop the process and return the list to this point."
perl.stalker.normalize_nicks = "this option will truncate special chars from username (like: ~) (default: on)"
perl.stalker.recursive_search = "When enabled, recursive search causes stalker to function better than a simple hostname to nickname map. Disabling the recursive search in effect turns stalker into a more standard hostname -> nickname map."
perl.stalker.search_this_network_only = "When enabled searches are limited to within the network the window is currently set on. Turning this off is really only useful if multiple networks don't encode the hostmask. (default: on)"
perl.stalker.tags = "comma separated list of tags used in messages printed by stalker. See documentation for possible tags (e.g. 'no_log', 'no_highlight'). Debug messages will ignore this option."
perl.stalker.use_localvar = "When enabled, only channels with a localvar 'stalker' will be monitored. This option will not affect /NICK and /WHOIS monitoring. It's only for /JOIN messages. (default: off)"
python.apply_corrections.check_every = "Interval between each check for expired messages."
python.apply_corrections.data_timeout = "Time before a message is expired."
python.apply_corrections.message_limit = "Number of messages to store per nick."
python.apply_corrections.print_format = "Format string for the printed corrections."
python.apply_corrections.print_limit = "Maximum number of lines to correct."
python.clone_scanner.autofocus = "Focus the clone_scanner buffer in the current window if it isn't already displayed by a window."
python.clone_scanner.clone_onjoin_alert_key = "Which 'key' to display in the on-join alerts: 'mask' for full hostmasks, or 'nick' for nicks"
python.clone_scanner.clone_report_key = "Which 'key' to display in the clone report: 'mask' for full hostmasks, or 'nick' for nicks"
python.clone_scanner.colors.clone_report.clone.match = "The colour of the match details (masks or nicks) in the clone report."
python.clone_scanner.colors.clone_report.clone.message = "The colour of the clone hit in the clone report message."
python.clone_scanner.colors.clone_report.header.channel = "The colour of the channel name in the clone report header."
python.clone_scanner.colors.clone_report.header.message = "The colour of the clone report header."
python.clone_scanner.colors.clone_report.header.number_of_hosts = "The colour of the number of hosts in the clone report header."
python.clone_scanner.colors.clone_report.subheader.host = "The colour of the host in the clone report subheader."
python.clone_scanner.colors.clone_report.subheader.message = "The colour of the clone report subheader."
python.clone_scanner.colors.clone_report.subheader.number_of_clones = "The colour of the number of clones in the clone report subheader."
python.clone_scanner.colors.join_messages.channel = "The colour for the 'channel'-part of the join messages."
python.clone_scanner.colors.join_messages.identhost = "The colour for the 'ident@host'-part of the join messages."
python.clone_scanner.colors.join_messages.message = "The base colour for the join messages."
python.clone_scanner.colors.join_messages.nick = "The colour for the 'nick'-part of the join messages. Note: if you have colorize_nicks, this option might not always work as expected."
python.clone_scanner.colors.mask.identhost = "The formatting of the identhost in the match mask."
python.clone_scanner.colors.mask.nick = "The formatting of the nick in the match mask."
python.clone_scanner.colors.onjoin_alert.channel = "The on-join clone alert's channel colour. Formats are space separated."
python.clone_scanner.colors.onjoin_alert.matches = "The on-join clone alert's matches (masks or nicks) colour. Formats are space separated. Note: if you have colorize_nicks, this option might not work as expected."
python.clone_scanner.colors.onjoin_alert.message = "The on-join clone alert's message colour. Formats are space separated."
python.clone_scanner.colors.onjoin_alert.nick = "The on-join clone alert's nick colour. Formats are space separated. Note: if you have colorize_nicks, this option might not work as expected."
python.clone_scanner.compare_idents = "Match against ident@host.name instead of just the hostname. Useful if you don't want different people from bouncers marked as clones"
python.clone_scanner.display_join_messages = "Display all joins in the clone_scanner buffer"
python.clone_scanner.display_onjoin_alert_clone_buffer = "Display an on-join clone alert in the clone_scanner buffer"
python.clone_scanner.display_onjoin_alert_current_buffer = "Display an on-join clone alert in the current buffer"
python.clone_scanner.display_onjoin_alert_target_buffer = "Display an on-join clone alert in the buffer where the clone was detected"
python.clone_scanner.display_scan_report_clone_buffer = "Display manual scan reports in the clone buffer"
python.clone_scanner.display_scan_report_current_buffer = "Display manual scan reports in the current buffer"
python.clone_scanner.display_scan_report_target_buffer = "Display manual scan reports in the buffer of the scanned channel"
python.whois_on_query.command = "the command sent to do the whois ($nick is repladed by nick) (default: "/whois $nick $nick")"
python.whois_on_query.self_query = "if on, send whois for self queries (default: "off")"
